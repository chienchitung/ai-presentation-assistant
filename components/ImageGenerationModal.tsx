
import React, { useState } from 'react';
import { AiConfig, Strings } from '../types';
import Loader from './Loader';

interface ImageGenerationModalProps {
  isOpen: boolean;
  onClose: () => void;
  onConfirm: (imageUrl: string) => void;
  aiConfig: AiConfig;
  generateImageAction: (aiConfig: AiConfig, prompt: string) => Promise<string>;
  strings: Strings;
}

const ImageGenerationModal: React.FC<ImageGenerationModalProps> = ({ isOpen, onClose, onConfirm, aiConfig, generateImageAction, strings }) => {
  const [prompt, setPrompt] = useState('');
  const [generatedImageUrl, setGeneratedImageUrl] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const handleGenerate = async () => {
    if (!prompt.trim()) return;
    setIsLoading(true);
    setError(null);
    setGeneratedImageUrl(null);
    try {
      const imageUrl = await generateImageAction(aiConfig, prompt);
      setGeneratedImageUrl(imageUrl);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'An unknown error occurred.');
    } finally {
      setIsLoading(false);
    }
  };

  const handleConfirm = () => {
    if (generatedImageUrl) {
      onConfirm(generatedImageUrl);
    }
  };
  
  const handleClose = () => {
    // Reset state on close
    setPrompt('');
    setGeneratedImageUrl(null);
    setIsLoading(false);
    setError(null);
    onClose();
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-60 flex items-center justify-center z-50 p-4">
      <div className="bg-white dark:bg-slate-900 rounded-lg shadow-xl p-8 w-full max-w-2xl text-slate-900 dark:text-white">
        <h2 className="text-3xl font-bold mb-6">{strings.generateImage}</h2>
        
        <div className="mb-4">
            <label htmlFor="image-prompt" className="block text-sm font-medium text-slate-700 dark:text-slate-300 mb-1">{strings.imagePrompt}</label>
            <textarea
                id="image-prompt"
                value={prompt}
                onChange={(e) => setPrompt(e.target.value)}
                placeholder="e.g., A blue robot holding a red flower"
                rows={3}
                className="w-full bg-slate-100 dark:bg-slate-800 border border-slate-300 dark:border-slate-600 rounded-md p-2 text-slate-900 dark:text-white focus:ring-2 focus:ring-indigo-500 outline-none"
                disabled={isLoading}
            />
        </div>

        <div className="mb-6 h-64 w-full bg-slate-100 dark:bg-slate-800 rounded-md flex items-center justify-center overflow-hidden">
            {isLoading && <Loader message={strings.generating} />}
            {error && <p className="text-red-500 dark:text-red-400 text-center p-4">{error}</p>}
            {generatedImageUrl && !isLoading && (
                <img src={generatedImageUrl} alt="Generated by AI" className="max-h-full max-w-full object-contain" />
            )}
        </div>

        <div className="flex justify-end gap-4">
          <button onClick={handleClose} className="bg-slate-200 hover:bg-slate-300 dark:bg-slate-700 dark:hover:bg-slate-600 text-slate-800 dark:text-slate-200 font-bold py-2 px-5 rounded-md transition-colors">
            {strings.cancel}
          </button>
          {!generatedImageUrl && (
            <button
                onClick={handleGenerate}
                disabled={isLoading || !prompt.trim()}
                className="bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-2 px-5 rounded-md transition-colors disabled:bg-indigo-400 disabled:cursor-not-allowed"
            >
                {strings.generate}
            </button>
          )}
           {generatedImageUrl && (
            <button
                onClick={handleConfirm}
                className="bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-5 rounded-md transition-colors"
            >
                {strings.addImageToSlide}
            </button>
           )}
        </div>
      </div>
    </div>
  );
};

export default ImageGenerationModal;
